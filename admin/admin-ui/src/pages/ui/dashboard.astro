---
import StandardLayoutWithSidebar from "../../layouts/standardLayoutWithSidebar.astro";
const memoryMap = new Array();
let memoryJson: any;

if (
  Astro.request.headers.get("Accept")?.includes("application/json") &&
  Astro.request.headers.get("Accept")?.includes("text/html") !== true &&
  Astro.request.headers.get("WE-DO-NOT-ACCEPT") === "text/html" &&
  Astro.request.headers.get("X-Forwarded-For") === "astro"
) {
  const res = await fetch("http:///0.0.0.0:6700/api/server-stats").catch(
    (err) => {
      console.log(err);
      return;
    }
  );
  if (!res) {
    return;
  }
  memoryJson = await res?.json();
  if (!memoryJson) {
    return;
  }
  const memory = memoryJson.stats;
  console.log(memory);
  if (!memory) {
    return;
  }
  memory.map((item: Object) => {
    for (const [key, value] of Object.entries(item)) {
      memoryMap.push({ [key]: value });
    }
  });
  if (!memoryMap) {
    return;
  }
  return new Response(JSON.stringify(memoryMap), {
    headers: {
      "Content-Type": "application/json",
    },
  });
}
---

<style>
  h1 {
    font-size: 2rem;
    font-weight: 700;
    margin-bottom: 1rem;
  }
  input {
    padding: 1rem;
    border: 1px solid #ccc;
    border-radius: 4px;
    font-size: 1rem;
    margin-bottom: 1rem;
  }
  button {
    padding: 1rem;
    border: 1px solid #ccc;
    border-radius: 4px;
    font-size: 1rem;
    margin-bottom: 1rem;
    cursor: pointer;
  }
  button:hover {
    background-color: #a98484;
  }
</style>

<script>
import { $router } from "../../stores/router";

  function humanFileSize(value: number) {
    var i = value == 0 ? 0 : Math.floor(Math.log(value) / Math.log(1024));
    return (
      (value / Math.pow(1024, i)).toFixed(2) +
      " " +
      ["B", "kB", "MB", "GB", "TB"][i]
    );
  }

  function parseJSON(jsonString: string) {
    try {
      const parsed = JSON.parse(jsonString);
      if (parsed && typeof parsed === "object") {
        return parsed;
      }
    } catch (e) {
      return e;
    }
  }

  $router.subscribe((val) => {
    if (val?.route === "dashboard") {
   let timer = setInterval(async () => {
    if (!window.location.href.includes("dashboard")) {
      clearInterval(timer);
      return;
    }
    const res = await fetch(window.location.href, {
      headers: {
        Accept: "application/json",
        "X-Forwarded-For" : "astro",
        "WE-DO-NOT-ACCEPT": "text/html",
      },
    });

    if (!res) {
      clearInterval(timer);
      return;
    }
    const stat = await res?.text();
    let stats;

    if (parseJSON(stat)) {
      stats = parseJSON(stat);
    } else if (!parseJSON(stat)) {
      clearInterval(timer);
      return;
    }

    if (!stats || stats === undefined) {
      clearInterval(timer);
      return;
    }

    if (stats.map === undefined) {
      clearInterval(timer);
      return;
    }

    const random = stats.map(
      (item: any) => {for (const object of Object.entries(item)) {
        const key = object[0];
        const value = object[1] as Object;
        let temp = []

        if (key === "memory") {
          for (const [key, tempval] of Object.entries(value)) {
            temp.push(Object.entries(tempval).map((subitem) => {
              const key = subitem[0];
              const secvalue = subitem[1];
              return `<div><strong>${key}</strong>: ${humanFileSize(parseInt(secvalue as string))}</div>`
            })
            )
          }
          return `<div><strong>${key}</strong>: ${temp.join("")}</div></br>`;
        } else {
                  for (const [key, tempval] of Object.entries(value)) {
          temp.push(Object.entries(tempval).map((subitem) => {
            const key = subitem[0];
            const value = subitem[1];
            return `<div><strong>${key}</strong>: ${value}</div>`
          })
          )
        }
          return `<div><strong>${key}</strong>: ${temp.join("")}</div></br>`;
        }
      }
    }
    );
    if (!random) {
      clearInterval(timer);
      return;
    }
    const memoryData = document.getElementById("memory-data");
    if (memoryData) {
      memoryData.innerHTML = random.join("");
    }
  }, 1000);
  
  }
  });

</script>

<StandardLayoutWithSidebar title="Dashboard">
  <h1>Dashboard</h1>
  <div id="memory-data"></div>
</StandardLayoutWithSidebar>
