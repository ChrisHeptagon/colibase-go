---
import ColibaseLogo from "../../public/colibase_logo.svg";
const { headerText } = Astro.props;
---

<>
  <template id="login-form-template">
    <style>
      @keyframes fadeIn {
        0% {
          opacity: 0;
        }
        100% {
          opacity: 1;
        }
      }
      @keyframes fadeOut {
        0% {
          opacity: 1;
        }
        100% {
          opacity: 0;
        }
      }
      * {
        font-family: Arial, Helvetica, sans-serif;
      }
      :host(login-form) {
        animation: fadeIn 0.5s ease-in-out;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100%;
        box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.75);
      }
      form {
        background-color: #ffffff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.75);
      }
      .logo {
        margin: 0 auto;
        margin-bottom: 20px;
        display: block;
        width: 100px;
        filter: drop-shadow(0px 0px 10px rgba(0, 0, 0, 0.75));
      }
      h1 {
        text-align: center;
        color: #000000;
        font-size: 24px;
        margin: 0 0 20px 0;
        text-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5);
      }
      fieldset {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        border: none;
        padding-left: 10px;
        padding-right: 10px;
      }
      legend {
        font-size: 20px;
        text-align: center;
      }

      button {
        border: none;
        border-radius: 5px;
        padding: 10px;
        font-weight: bold;
        width: 100%;
        box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.75);
        font-size: 16px;
        background-image: radial-gradient(
          circle at 90% 100%,
          #b8e986 0%,
          #8ecf70 50%,
          #5ca860
        );
        cursor: pointer;
      }
      @keyframes outlineFadeIn {
        0% {
          outline: 0px solid #000000;
        }
        100% {
          outline: 2px solid #000000;
        }
      }
      @keyframes outlineFadeOut {
        0% {
          outline: 2px solid #000000;
        }
        100% {
          outline: 0px solid #000000;
        }
      }
      @keyframes activeButton {
        0% {
          filter: brightness(1);
        }
        100% {
          filter: brightness(0.8);
        }
      }
      button:hover {
        outline: 2px solid #000000;
        animation: outlineFadeIn 0.5s ease-in-out;
      }
      button:not(:hover) {
        animation: outlineFadeOut 0.5s ease-in-out;
        outline: none;
      }
      button:active {
        animation: activeButton 0.5s ease-in-out;
        filter: brightness(0.8);
      }
      button:not(:active) {
        transition: filter 0.5s ease-in-out;
        filter: brightness(1);
      }
      .error-item {
        color: rgb(0, 0, 0);
        background-color: rgb(255, 255, 255);
        text-transform: capitalize;
        border: 5px solid red;
        border-radius: 5px;
        box-shadow: 0px 0px 10px 0px rgba(0, 0, 0, 0.75);
        padding: 10px;
        font-size: 14px;
        font-family: Arial, Helvetica, sans-serif;
        animation: fadeIn 0.5s ease-in-out;
      }
    </style>
    <form id="login-form" novalidate autocomplete="on">
      <img src={ColibaseLogo.src} alt="Colibase Logo" class="logo" />
      <h1>{headerText}</h1>
      <fieldset>
        <legend>Enter your credentials</legend>
        <form-fields></form-fields>
        <p id="error" style="display: none;"></p>
      </fieldset>
      <button type="submit" id="button">Login</button>
    </form>
  </template>

  <template id="login-form-fields-template">
    <style>
      label {
        font-size: 16px;
        margin-top: 10px;
        align-self: flex-start;
        text-shadow: 0px 0px 10px rgb(0, 0, 0, 0.5);
        display: block;
      }
      input {
        display: block;
        box-shadow: 0px 0px 10px 0px rgb(0, 0, 0, 0.5);
        border: 1px 2px solid #000000;
        border-radius: 5px;
        padding: 10px;
        margin-top: 5px;
        margin-bottom: 5px;
        font-size: 16px;
      }
      .form-error {
        color: red;
        font-size: 14px;
        text-shadow: 0px 0px 10px rgb(92, 11, 11);
        margin: 5px;
        align-self: flex-start;
        transition: all 0.5s ease-in-out;
        animation: fadeIn 0.5s ease-in-out;
      }
    </style>
  </template>

  <login-form></login-form>

  <script>
    const UserSchema = await fetch("http://0.0.0.0:6700/api/login-schema").then(
      (res) => res.json()
    );
    let sharedError: string 
    let sharedShadowDOM: ShadowRoot;
    class LoginForm extends HTMLElement {
      static formAssociated = true;

      constructor() {
        super();
        const template = document.getElementById(
          "login-form-template"
        ) as HTMLTemplateElement;
        const templateContent = template?.content;
        sharedShadowDOM = this.attachShadow({ mode: "open" });
        sharedShadowDOM?.appendChild(templateContent?.cloneNode(true));
      }

      connectedCallback() {
        const form = this.shadowRoot?.querySelector("#login-form");
        form?.addEventListener("submit", this.handleSubmit);
        const fields = this.shadowRoot?.querySelectorAll("input");
        
      }

      handleSubmit = async (e: Event) => {
        e.preventDefault();
        const form = this.shadowRoot?.querySelector("#login-form");
        const formData = new FormData(form as HTMLFormElement);
        const data = Object.fromEntries(formData.entries());
        let submitURL: string = "";
        if (window.location.pathname.includes("login")) {
          submitURL = "http://0.0.0.0:6700/api/login";
        } else if (window.location.pathname.includes("init")) {
          submitURL = "http://0.0.0.0:6700/api/init-login";
        }
        const response = await fetch(submitURL, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(data),
        });
        const responseJSON = await response.json();
        if (responseJSON.error) {
          sharedError = responseJSON.error;
          const error = this.shadowRoot?.querySelector("#error") as HTMLElement;
          if (error) {
            error.className = "error-item";
            error.style.display = "block";
            error.innerHTML = responseJSON.error;
          }
        }
      };
    }

    class FormFields extends HTMLElement {
      constructor() {
        super();
        const template = document.getElementById(
          "login-form-fields-template"
        ) as HTMLTemplateElement;
        if (template) {
          template.innerHTML += `
          ${UserSchema.map(
            (field: any) => `
              <label for=${field.name}>${field.name}</label>
              <input
                type=${field.name}
                name=${field.name}
                id=${field.name}
                required=${field.required}
                autocomplete="on"
                aria-required=${field.required}
                aria-label=${field.name}
                aria-describedby=${`${field.name}-error`}
              ></input>
              <span id=${`${field.name}-error`}></span>
            `
          ).join("")}
        `;
          const fieldsElements = sharedShadowDOM.querySelector("form-fields");
        fieldsElements?.appendChild(template.content?.cloneNode(true));
        }
      }

      connectedCallback() {
        const fields = this.shadowRoot?.querySelectorAll("input");
        fields?.forEach((field) => {
          field.addEventListener("input", this.handleInput);
        });
      }
      handleInput = (e: Event) => {
        const input = e.target as HTMLInputElement;
        const error = this.shadowRoot?.querySelector(
          `#${input.name}-error`
        ) as HTMLElement;
        this.showError(input, error);
      };
      showError = (input: HTMLInputElement, error: HTMLElement) => {
        if (input.validity.valueMissing) {
          error.innerText = `${input.name} is a required field`;
        } else if (input.validity.typeMismatch) {
          error.innerText = `${input.name} should be a valid ${input.type}`;
        } else if (input.validity.tooShort) {
          error.innerText = `${input.name} should be at least ${input.minLength} characters; you entered ${input.value.length}.`;
        } else if (sharedError.includes(input.name)) {
          error.innerText = sharedError;
        } else {
          error.innerText = "";
        }
        error.className = "form-error";
      };
    }
    customElements.define("login-form", LoginForm);
    customElements.define("form-fields", FormFields);
  </script>
</>
