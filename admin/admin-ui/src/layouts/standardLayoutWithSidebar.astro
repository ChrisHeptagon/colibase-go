---
const { title } = Astro.props;
import JsonElement from "../components/jsonElement.astro";
import ColibaseLogo from "../../public/colibase_logo.svg";

const elements = [
  {
    _header: {
      tag: "div",
      text: "Header",
      style: "color: red;",
    },
  },
  {
    _test: {
      tag: "div",
      innerHTML: "Test",
      style: "color: red;",
    },
  },
];
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title}</title>
  </head>

  <script>
    import { $router } from "../stores/router.ts";
    if (typeof window !== "undefined") {
      $router.subscribe((value) => {
        console.log(value);
        for (const link of document.querySelectorAll("a")) {
          if (
            value?.path === link.getAttribute("href") &&
            value.path !== "/entry/logout"
          ) {
            if (value.path !== "/entry/logout") {
              fetch(value.path).then((response) => {
                response.text().then((text) => {
                  const parser = new DOMParser();
                  const doc = parser.parseFromString(text, "text/html");
                  const newContent = doc.querySelector("section#content");
                  const newScript = doc.scripts
                  const oldContent = document.querySelector("section#content");
                  const oldScript = document.scripts
                  if (!newContent || !oldContent) {
                    window.location.reload();
                    window.location.href = value.path;
                  } else if (newContent.innerHTML === oldContent.innerHTML)
                    return;
                  if (newContent && oldContent) {
                    if (newContent.innerHTML === "") {
                      window.location.reload();
                      window.location.href = value.path;
                    } else if (newContent.innerHTML !== oldContent.innerHTML) {
                    oldContent.replaceWith(newContent);
                    for (let tempScript of oldScript) {
                      tempScript.remove();
                    }
                    for (let tempScript of newScript) {
                      const script = document.createElement("script");
                      script.type = tempScript.type;
                      if (tempScript.src) script.src = tempScript.src;
                      if (tempScript.innerHTML) script.innerHTML = tempScript.innerHTML;
                      document.head.appendChild(script);
                    }
                    }
                  }
                });
              });
              link.style.backgroundColor = "rgba(255, 255, 255, 0.25)";
            }
          } else if (value?.path === "/entry/logout") {
            window.history.replaceState({}, "", value.path);
            window.location.reload();
            window.location.href = value.path;
          } else {
            link.style.backgroundColor = "transparent";
          }
        }
      });
    }
  </script>

  <style lang="scss">
    body,
    html {
      min-height: 100vh;
      margin: 0 auto;
      padding: 0;
      
    }
    main {
      display: flex;
      position: relative;
        flex-direction: row;
      width: 100%;
        min-height: inherit;
      background-color: #f5f5f5;
      section#sidebar {
        aside#sidebar {
          top: 0;
          flex: 1;
          position: sticky;
          left: 0;
          bottom: 0;
          padding: 1rem;
          height: calc(100vh - 2rem);
          background-image: linear-gradient(to bottom, #183e3a, #dafaa4);

        }

        img,
        h1 {
          margin: 0 auto;
          display: block;
          padding: 0;
        }
        img {
          width: 100px;
          filter: drop-shadow(0 0 0.75rem rgba(0, 0, 0, 0.5));
        }
        h1 {
          font-size: 2rem;
          margin-top: 1rem;
          color: white;
          text-shadow: 0 0 0.75rem rgba(0, 0, 0, 0.5);
        }

        section#sidebar-links {
          margin-top: 2rem;
          display: grid;
          width: 100%;
          justify-items: center;
          align-items: center;
          grid-auto-flow: row;
          row-gap: 1rem;
          a {
            color: white;
            text-decoration: none;
            font-size: 1.25rem;
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            transition: background-color 0.25s ease-in-out;
            &:hover {
              background-color: rgba(255, 255, 255, 0.25);
            }
          }
        }
      }
      section#content {
        padding: 1rem;
        width: 100%;
        display: flex;
        position: relative;
        overflow: auto;
        flex: 2;
        flex-direction: column;
        min-width: 300px;
      }
    }
  </style>
  <body>
    <main>
      <section id="sidebar">
        <aside id="sidebar">
          <img src={ColibaseLogo.src} alt="Colibase Logo" />
          <h1>Colibase</h1>
          <section id="sidebar-links">
            <a href="/ui/dashboard">Dashboard</a>
            <a href="/ui/database">Database</a>
            <a href="/ui/settings">Settings</a>
            <a href="/entry/logout" data-astro-prefetch="false">Logout</a>
          </section>
        </aside>
      </section>
      <section id="content">
        <slot />

        <!-- {
          elements.map((element) => {
            return <JsonElement {...element} />;
          })
        } -->
      </section>
    </main>
  </body>
</html>
