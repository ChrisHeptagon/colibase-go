---
const { title } = Astro.props;
import ColibaseLogo from "../../public/colibase_logo.svg";


---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title}</title>
  </head>



  <script>
    import {
$pageDataStore,
      addPageData,
      getPageData,
      updatePageData,
    } from "../stores/router.ts";



    if (typeof window !== "undefined") {
      window.addEventListener("load", () => {
        addPageData({
          title: document.title,
          path: window.location.href,
          content: document.querySelector("section#content") as HTMLElement,
          head: document.head,
        });
        updatePageData({
          title: document.title,
          path: window.location.href,
          content: document.querySelector("section#content") as HTMLElement,
          head: document.head,
        })
      });
      window.addEventListener("pagechange", (e) => {
        const item = (e as CustomEvent).detail;
        if (!item) return;
        
        updatePageData(item);
      });

      window.addEventListener("click", (e) => {
        const link = e.target as HTMLAnchorElement;
        if (link.tagName !== "A") return;
        if (link.href.startsWith(window.location.origin) && !link.href.includes("#") && !link.href.includes("logout")) {
          e.preventDefault();
          if (link.href !== window.location.href) {
            window.dispatchEvent(
              new CustomEvent("pagechangerequested", { detail: link })
            );
          } 
        } 
      })



      window.addEventListener("pagechangerequested", (e) => {
        const targetEl = (e as CustomEvent).detail as HTMLAnchorElement;
        targetEl.style.backgroundColor = "rgba(0, 0, 0, 0.1)";
        targetEl.animate(
          [
            {
              transform: "scale(1)",
            },
            {
              transform: "scale(0.95)",
            },
            {
              transform: "scale(1)",
            },
          ],
          {
            duration: 250,
            easing: "ease-in-out",
          }
        );
        fetchPage(targetEl.href);
      });
      
      async function fetchPage(href: string) {
        window.history.pushState({}, "", href);
        let currContent = document.querySelector(
          "section#content"
        ) as HTMLElement;
        if (!currContent) return;
        await fetch(href, {
          method: "GET",
          headers: {},
        }).then((response) => {
          response.text().then(async (text) => {
            const parser = new DOMParser();
            const doc = parser.parseFromString(text, "text/html");
            const newContent = doc.querySelector("section#content");
            const newHead = doc.head;
            const currHead = document.querySelector("head");
            if (!newContent || !currContent) return;
            if (!newHead || !currHead) return;
            if (newContent === currContent) return;
            if (newHead === currHead) return;
            addPageData({
              title: doc.title,
              path: href,
              content: newContent as HTMLElement,
              head: newHead,
            });
            const item = getPageData(doc.title);
            if (item.content === currContent) return;
            if (!item) return;
            if (!newHead) return;
            const tempHead = document.createElement("head");
            const tempArr: Element[] = [];
            for (const child of newHead.children) {
              if (child.tagName === "SCRIPT") {
                const tempScriptEl = document.createElement("script");
                tempScriptEl.innerHTML = child.innerHTML;
                for (const attr of child.attributes) {
                  tempScriptEl.setAttribute(attr.name, attr.value);
                }
                if (tempArr.includes(tempScriptEl)) {
                  tempArr.splice(tempArr.indexOf(tempScriptEl), 1);
                }
                tempArr.push(tempScriptEl);
              } else {
                if (tempArr.includes(child)) {
                  tempArr.splice(tempArr.indexOf(child), 1);
                }
                tempArr.push(child);
              }
            }
            if (!currHead) return;
            if (!tempHead) return;
            tempHead.append(...tempArr);
            currHead.replaceWith(tempHead);
            const tempContent = item.content as HTMLElement;
            if (!tempContent) return;
            document.querySelector("section#content")?.replaceWith(tempContent);
            window.dispatchEvent(new CustomEvent("pagechange", { detail: {item, path: item.path, }}));
          });
        });
      }


    }
  
  </script>

  <style lang="scss">
    html {
      position: absolute;
      height: 100%;
      width: 100%;
      top: 0;
      left: 0;
      margin: 0 auto;
      padding: 0;
    }
    body {
      position: absolute;
      width: 100%;
      top: 0;
      right: 0;
      margin: 0 auto;
      padding: 0;
      min-height: 100%;
      min-width: 100%;
      font-family: "Roboto", sans-serif;
      font-size: 16px;
    }
    main {
      display: grid;
      position: absolute;
      min-width: 100%;
      min-height: inherit;
      background-color: #f5f5f5;
      grid-template-columns: 200px 1fr;
      grid-template-areas: "sidebar content";
      min-height: 100%;
      section#sidebar {
        grid-area: sidebar;
        display: grid;
        top: 0;
        position: sticky;
        aside#sidebar {
          padding: 1rem;
          background-image: linear-gradient(to bottom, #183e3a, #dafaa4);
        }

        img {
          margin: 0 auto;
          display: block;
          padding: 0;
          width: 100px;
          filter: drop-shadow(0 0 0.75rem rgba(0, 0, 0, 0.5));
        }
        h1 {
          font-size: 2rem;
          margin-top: 1rem;
          text-align: center;
          color: white;
          text-shadow: 0 0 0.75rem rgba(0, 0, 0, 0.5);
        }

        section#sidebar-links {
          margin-top: 2rem;
          display: grid;
          width: 100%;
          justify-items: center;
          align-items: center;
          grid-auto-flow: row;
          row-gap: 1rem;
          a {
            color: white;
            text-decoration: none;
            font-size: 1.25rem;
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            transition: background-color 0.25s ease-in-out;
            &:hover {
              background-color: rgba(255, 255, 255, 0.25);
            }
          }
        }
      }
      section#content {
        min-width: 300px;
        grid-area: content;
        padding: 1rem;
      }
    }
  </style>
  <body>
    <main>
      <section id="sidebar">
        <aside id="sidebar">
          <img src={ColibaseLogo.src} alt="Colibase Logo" />
          <h1>Colibase</h1>
          <section id="sidebar-links">
            <a href="/ui/dashboard">Dashboard</a>
            <a href="/ui/database">Database</a>
            <a href="/ui/settings">Settings</a>
            <a href="/entry/logout" data-astro-prefetch="false">Logout</a>
          </section>
        </aside>
      </section>
      <section id="content">
        <slot />
      </section>
    </main>
  </body>
</html>
