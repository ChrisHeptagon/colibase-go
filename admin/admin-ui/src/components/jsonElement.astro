---
import sass from 'sass';
import * as ts from 'typescript';
export interface Props extends astroHTML.JSX.AstroBuiltinAttributes {
    tag?: string;
    slot?: "first"|"before"|"after"|"last";
    text?: string;
    class?: Record<string, boolean> | Record<any, any> | Iterable<string> | Iterable<any> | string;
    innerHTML?: string;
    scss?: string;
    script?: string;
    typescript?: string;
    defaults?: Props;
    debug?: boolean;
    [attrs: string]: any;
}

const default_slot = "last";

const {
    tag:Tag="div",
    slot=default_slot,
    text,
    class: classes,
    innerHTML,
    scss,
    script,
    typescript,
    defaults,
    debug,
    ...attrs
} = Astro.props as Props

function tsCompile(source: string, options: ts.TranspileOptions): string {
    const result = ts.transpileModule(source, options).outputText;
    return result;
}

let newScript: string = "";
if (typescript) {
    newScript = tsCompile(typescript, { compilerOptions: { module: ts.ModuleKind.ESNext, target: ts.ScriptTarget.ESNext }});
}

var trueScss: string = "";
if (scss != undefined) {
    await sass.compileStringAsync(scss).then((result) => {
    trueScss = result.css.toString();
    console.log(trueScss);
    });
}


interface Children {
    [attrs: string]: Array<Props>;
};

var children: Children = {
    first: [],
    before: [],
    after: [],
    last: []
};

function omit(obj: Props) {
    Object.keys(obj).forEach((key) => {
        if (key.startsWith('_') && obj[key] != false && typeof obj[key] != 'undefined') {
            obj[key].slot?
            children[obj[key].slot].push(obj[key]):
            children[default_slot].push(obj[key])
            delete obj[key];
        }
    })
  return obj;
}

if (debug) console.log(Astro.props);
---


<Tag class:list={classes} {...omit(attrs)}>
    <slot name="first"/>
    { children.first && children.first.map((e) => {return <Astro.self {...{...defaults, ...e}} />})}
    {text && text}
    { children.before && children.before.map((e) => {return <Astro.self {...{...defaults, ...e}} />})}
    <slot />
    { children.after && children.after.map((e) => {return <Astro.self {...{...defaults, ...e}} />})}
    {innerHTML && <Fragment set:html={innerHTML}/>}
    { scss && <Fragment set:html={`<style>${trueScss}</style>`}/>}
    { script && <Fragment set:html={`<script>${script}</script>`}/>}
    { typescript && <Fragment set:html={`<script type="module">${newScript}</script>`}/>}
    { children.last && children.last.map((e) => {return <Astro.self {...{...defaults, ...e}} />})}
    <slot name="last"/>
</Tag>